{"version":3,"sources":["App.module.scss","api.ts","components/HistoricalGraph.tsx","components/MomentDate.tsx","pages/Home.tsx","pages/About.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","main","background","MeterTypes","HistoricalGraph","_ref","data","total","monthlyTotals","Map","date","roundedDate","moment","format","oldTotal","get","set","totalArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref4","value","_ref3","Object","slicedToArray","push","err","return","react_default","a","createElement","Fragment","es6","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","MomentDate","dateTime","toISOString","toDate","toLocaleDateString","getTotal","all","output","API_HOST","process","REACT_APP_API_HOST","Home","_useState","useState","utc","_useState2","startDate","setStartDate","_useState3","_useState4","endDate","setEndDate","_useState5","_useState6","dailyTotals","setDailyTotals","updateTotals","_updateTotals","apply","this","arguments","asyncToGenerator","regenerator_default","mark","_callee","values","wrap","_context","prev","fetch","concat","sent","t0","json","t1","stop","useEffect","TOTAL_UNITS_OUTPUT","DUPLEX","onChange","e","target","onBlur","About","href","withRouter","history","className","navbar","color","navbarGroup","align","Alignment","LEFT","navbarHeading","navbarDivider","buttons","Classes","MINIMAL","onClick","icon","text","styles","react_router","path","exact","component","Boolean","window","location","hostname","match","render","react_router_dom","basename","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.504fb708.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__2qbxY\",\"background\":\"App_background__2mNDg\"};","// HACK: Since CRA doesn't support importing TypeScript from other lerna\n// packages, we just inline the types here from the server.\n// Follow PR https://github.com/facebook/create-react-app/pull/6599.\nexport type HistoricalTotals = {\n  [date: string]: {\n    [MeterTypes.TOTAL_UNITS_OUTPUT]: number;\n    [MeterTypes.DUPLEX]: number;\n    [MeterTypes.TOTAL_COPIER_UNITS]: number;\n    [MeterTypes.TOTAL_PRINT_UNITS]: number;\n    [MeterTypes.TOTAL_SCAN_UNITS]: number;\n    [index: string]: number;\n  };\n};\n\nexport enum MeterTypes {\n  TOTAL_UNITS_OUTPUT = \"Impression.AllMeterTypes.AllFunctions.AllSides.AllPageSizes\",\n  TOTAL_MONO_UNITS_OUTPUT = \"Impression.Mono.AllFunctions.AllSides.AllPageSizes\",\n  TOTAL_COLOR_UNITS_OUTPUT = \"Impression.Color.AllFunctions.AllSides.AllPageSizes\",\n  TOTAL_SCAN_UNITS = \"Impression.AllMeterTypes.Scan.AllSides.AllPageSizes\",\n  TOTAL_PRINT_UNITS = \"Impression.AllMeterTypes.Print.AllSides.AllPAgeSizes\",\n  TOTAL_COPIER_UNITS = \"Impression.AllMeterTypes.Copy.AllSides.AllPAgeSizes\",\n  DUPLEX = \"Impression.AllMeterTypes.AllFunctions.Duplex.AllPageSizes\"\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n  LineChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Line\n} from \"recharts\";\nimport moment from \"moment\";\n\nexport default ({ data }: { data: { [date: string]: number } }) => {\n  let total = 0;\n  const monthlyTotals = new Map<string, number>();\n  for (const date in data) {\n    const roundedDate = moment(date).format(\"YYYY-MM\");\n    const oldTotal = monthlyTotals.get(roundedDate) || 0;\n    monthlyTotals.set(roundedDate, data[date] + oldTotal);\n    total += data[date];\n  }\n\n  const totalArray: { date: string; total: number }[] = [];\n  for (const [date, total] of monthlyTotals) {\n    totalArray.push({ date, total });\n  }\n\n  return (\n    <>\n      <LineChart\n        width={1000}\n        height={700}\n        data={totalArray}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"total\" stroke=\"#82ca9d\" />\n      </LineChart>\n      <p>Total: {total}</p>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Moment } from \"moment\";\n\nexport default function MomentDate({ date }: { date: Moment }) {\n  return (\n    <time dateTime={date.toISOString()}>\n      {date.toDate().toLocaleDateString()}\n    </time>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport HistoricalGraph from \"../components/HistoricalGraph\";\nimport moment from \"moment\";\nimport { HistoricalTotals, MeterTypes } from \"../api\";\nimport MomentDate from \"../components/MomentDate\";\n\nfunction getTotal(all: HistoricalTotals, type: MeterTypes) {\n  const output: { [date: string]: number } = {};\n  for (const date in all) {\n    output[date] = all[date][type];\n  }\n  return output;\n}\n\nconst API_HOST =\n  process.env.REACT_APP_API_HOST || \"https://printmon.potatofrom.space\";\n\nexport default () => {\n  const [startDate, setStartDate] = useState(moment.utc(\"2018-07-01\"));\n  const [endDate, setEndDate] = useState(moment.utc());\n  const [dailyTotals, setDailyTotals] = useState<HistoricalTotals | undefined>(\n    undefined\n  );\n\n  async function updateTotals() {\n    const values = await fetch(\n      `${API_HOST}/api/historical?startDate=${startDate.format(\n        \"YYYY-MM-DD\"\n      )}&endDate=${endDate.format(\"YYYY-MM-DD\")}`\n    );\n    setDailyTotals(await values.json());\n  }\n\n  useEffect(() => {\n    updateTotals();\n  }, []);\n\n  return (\n    <>\n      <h1>\n        AB Print Data from <MomentDate date={startDate} /> to{\" \"}\n        <MomentDate date={endDate} />\n      </h1>\n      {dailyTotals !== undefined && (\n        <>\n          <h2>Total Units Output</h2>\n          <HistoricalGraph\n            data={getTotal(dailyTotals, MeterTypes.TOTAL_UNITS_OUTPUT)}\n          />\n          <h2>Duplex Output</h2>\n          <HistoricalGraph data={getTotal(dailyTotals, MeterTypes.DUPLEX)} />\n        </>\n      )}\n      <input\n        type=\"date\"\n        value={startDate.format(\"YYYY-MM-DD\")}\n        onChange={e => setStartDate(moment(e.target.value))}\n        onBlur={updateTotals}\n      />{\" \"}\n      to\n      <input\n        type=\"date\"\n        value={endDate.format(\"YYYY-MM-DD\")}\n        onChange={e => setEndDate(moment(e.target.value))}\n        onBlur={updateTotals}\n      />\n    </>\n  );\n};\n","import React from \"react\";\n\nexport default function About() {\n  return (\n    <>\n      <h1>About AB Printing Monitor</h1>\n\n      <p>\n        AB Printing Monitor tracks the daily printing amounts of\n        Acton-Boxborough Regional High School.\n      </p>\n\n      <h2>Copyright</h2>\n\n      <p>\n        &copy; 2019 Kevin Liu and Kunal Sharda. This program is free software:\n        you can redistribute it and/or modify it under the terms of the{\" \"}\n        <a href=\"https://www.gnu.org/licenses/agpl-3.0.en.html\">\n          GNU Affero General Public License\n        </a>{\" \"}\n        as published by the Free Software Foundation, either version 3 of the\n        License, or (at your option) any later version.\n      </p>\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  Route,\n  Switch,\n  withRouter,\n  RouteComponentProps\n} from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport styles from \"./App.module.scss\";\nimport {\n  Navbar,\n  NavbarGroup,\n  NavbarHeading,\n  NavbarDivider,\n  Classes,\n  Alignment,\n  Button\n} from \"@blueprintjs/core\";\n\nfunction App({ history }: RouteComponentProps<{}>) {\n  return (\n    <div className=\"bp3-dark\">\n      <Navbar color=\"dark\">\n        <NavbarGroup align={Alignment.LEFT}>\n          <NavbarHeading>AB Printing</NavbarHeading>\n          <NavbarDivider />\n          <Button\n            className={Classes.MINIMAL}\n            onClick={() => history.push(\"/\")}\n            icon=\"home\"\n            text=\"Home\"\n          />\n          <Button\n            className={Classes.MINIMAL}\n            onClick={() => history.push(\"/about\")}\n            icon=\"book\"\n            text=\"About\"\n          />\n        </NavbarGroup>\n      </Navbar>\n      <main className={styles.main}>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/about\" exact component={About} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"react-app-polyfill/ie9\"; // For IE 9-11 support (https://github.com/facebook/create-react-app/tree/master/packages/react-app-polyfill)\nimport React from \"react\";\n//@ts-ignore\nimport { render } from \"react-snapshot\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nrender(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}