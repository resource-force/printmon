{"version":3,"sources":["App.module.scss","images/tree.png","api.ts","components/RollupCounter.tsx","trees.ts","components/Stats.tsx","components/tree-display/TreeDisplay.tsx","components/CurrentYearView.tsx","pages/Home.tsx","pages/About.tsx","App.tsx","serviceWorker.js","index.tsx","components/Stats.module.scss","components/tree-display/TreeDisplay.module.scss"],"names":["module","exports","main","__webpack_require__","p","MeterTypes","RollupCounter","_ref","num","targetRef","React","useRef","_useState","useState","_useState2","Object","slicedToArray","cur","setCur","useEffect","useOdometer","react_default","a","createElement","ref","UNRECYCLED_SHEETS_PER_TREE","THIRTY_PCT_RECYCLED_SHEETS_PER_TREE","paperToTrees","unrecycled","recycled","Math","round","Counter","unit","Fragment","className","styles","counter__odometer","counter__unit","Stats","_ref2","unrecycledPaperTotal","recycledPaperTotal","days","treesKilled","woodUsed","amountOfEnergyWasted","amountOfGHGEmitted","amountOfWaterUsed","amountOfSolidWaste","href","statsList","tree","require","MAX_TREES","Tree","isStump","variance","random","treeStump","undefined","style","display","position","left","concat","top","marginBottom","src","height","width","alt","TreeDisplay","treesConsumed","treesRemaining","treeDisplay","toConsumableArray","Array","min","keys","map","i","key","CurrentYearView","data","monthlyTotals","Map","date","roundedDate","moment","format","oldTotal","get","set","totalArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_ref4","value","_ref3","total","push","err","return","getTotal","all","output","TOTAL_UNITS_OUTPUT","DUPLEX","getMomentFormatter","formatDate","locale","parseDate","str","utc","isValid","toDate","placeholder","API_HOST","process","REACT_APP_API_HOST","withRouter","startDate","setStartDate","_useState3","_useState4","endDate","setEndDate","_useState5","_useState6","dailyTotals","setDailyTotals","updateTotals","useCallback","asyncToGenerator","regenerator_default","mark","_callee","values","wrap","_context","prev","fetch","sent","t0","json","t1","stop","dateInput","assign","canClearSelection","maxDate","onChange","e","isUserChange","minDate","Date","diff","textAlign","spinner","About","history","navbar","color","navbarGroup","align","Alignment","LEFT","navbarHeading","navbarDivider","buttons","Classes","MINIMAL","onClick","icon","text","react_router","path","exact","component","Home","Boolean","window","location","hostname","match","render","react_router_dom","basename","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c649872d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__uN9ca\"};","module.exports = __webpack_public_path__ + \"static/media/tree.287e594e.png\";","// HACK: Since CRA doesn't support importing TypeScript from other lerna\n// packages, we just inline the types here from the server.\n// Follow PR https://github.com/facebook/create-react-app/pull/6599.\n\nexport enum MeterTypes {\n  TOTAL_UNITS_OUTPUT = \"Impression.AllMeterTypes.AllFunctions.AllSides.AllPageSizes\",\n  TOTAL_MONO_UNITS_OUTPUT = \"Impression.Mono.AllFunctions.AllSides.AllPageSizes\",\n  TOTAL_COLOR_UNITS_OUTPUT = \"Impression.Color.AllFunctions.AllSides.AllPageSizes\",\n  TOTAL_SCAN_UNITS = \"Impression.AllMeterTypes.Scan.AllSides.AllPageSizes\",\n  TOTAL_PRINT_UNITS = \"Impression.AllMeterTypes.Print.AllSides.AllPAgeSizes\",\n  TOTAL_COPIER_UNITS = \"Impression.AllMeterTypes.Copy.AllSides.AllPAgeSizes\",\n  DUPLEX = \"Impression.AllMeterTypes.AllFunctions.Duplex.AllPageSizes\"\n}\n\nexport type HistoricalTotals = {\n  [date: string]: {\n    [MeterTypes.TOTAL_UNITS_OUTPUT]: number;\n    [MeterTypes.DUPLEX]: number;\n    [MeterTypes.TOTAL_COPIER_UNITS]: number;\n    [MeterTypes.TOTAL_PRINT_UNITS]: number;\n    [MeterTypes.TOTAL_SCAN_UNITS]: number;\n    [index: string]: number;\n  };\n};\n  ","import React, { useState, useEffect } from \"react\";\n\n//@ts-ignore\nimport useOdometer from \"use-odometer\";\nimport \"odometer/themes/odometer-theme-car.css\";\n\nexport default function RollupCounter({ num }: { num: number }) {\n  const targetRef = React.useRef(null);\n  // Roll up the number from zero on initial mount, have it update as num\n  // changes as well.\n  const [cur, setCur] = useState(0);\n  useEffect(() => {\n    setCur(num);\n  }, [num]);\n  useOdometer(targetRef, cur);\n\n  return <span ref={targetRef} />;\n}\n","const UNRECYCLED_SHEETS_PER_TREE = 8300;\nconst THIRTY_PCT_RECYCLED_SHEETS_PER_TREE = 8300 / 0.7;\n\nexport default function paperToTrees(unrecycled: number, recycled: number) {\n  return Math.round(\n    unrecycled / UNRECYCLED_SHEETS_PER_TREE +\n      recycled / THIRTY_PCT_RECYCLED_SHEETS_PER_TREE\n  );\n}\n","import React from \"react\";\nimport RollupCounter from \"./RollupCounter\";\n\nimport styles from \"./Stats.module.scss\";\nimport paperToTrees from \"../trees\";\n\nfunction Counter({ num, unit }: { num: number; unit: string }) {\n  return (\n    <>\n      <span className={styles.counter__odometer}>\n        <RollupCounter num={num} />\n      </span>\n      <span className={styles.counter__unit}>{unit}</span>\n    </>\n  );\n}\n\nexport default function Stats({\n  unrecycledPaperTotal,\n  recycledPaperTotal,\n  days\n}: {\n  unrecycledPaperTotal: number;\n  recycledPaperTotal: number;\n  days: number;\n}) {\n  const treesKilled = paperToTrees(unrecycledPaperTotal, recycledPaperTotal);\n  let woodUsed =\n    (unrecycledPaperTotal / 1000) * 0.02 + (recycledPaperTotal / 1000) * 0.014;\n  let amountOfEnergyWasted =\n    (unrecycledPaperTotal / 1000) * 0.1 + (recycledPaperTotal / 1000) * 0.08;\n  let amountOfGHGEmitted =\n    (unrecycledPaperTotal / 1000) * 89.9 + (recycledPaperTotal / 1000) * 74.3;\n  let amountOfWaterUsed =\n    (unrecycledPaperTotal / 1000) * 107 + (recycledPaperTotal / 1000) * 104;\n  let amountOfSolidWaste =\n    (unrecycledPaperTotal / 1000) * 5.9 + (recycledPaperTotal / 1000) * 5.8;\n\n  return (\n    <section>\n      <h2>Environmental Impact</h2>\n      <p>\n        Paper usage contributes to several environmental impacts. See the\n        impacts here, calculated live from values provided by the{\" \"}\n        <a href=\"https://c.environmentalpaper.org/\">\n          Environmental Paper Network\n        </a>\n        .\n      </p>\n      <p>Over the course of {days} days, we used...</p>\n      <ul className={styles.statsList}>\n        <li>\n          <Counter\n            num={unrecycledPaperTotal + recycledPaperTotal}\n            unit=\"whole sheets of paper\"\n          />\n        </li>\n        <li>\n          <Counter num={treesKilled} unit=\"trees\" />\n        </li>\n        <li>\n          <Counter num={amountOfGHGEmitted} unit=\"pounds of CO2\" />\n        </li>\n        <li>\n          <Counter num={woodUsed} unit=\"short tons of wood\" />\n        </li>\n        <li>\n          <Counter num={amountOfEnergyWasted} unit=\"BTUs of energy\" />\n        </li>\n        <li>\n          <Counter num={amountOfWaterUsed} unit=\"gallons of water\" />\n        </li>\n        <li>\n          <Counter num={amountOfSolidWaste} unit=\"pounds of solid waste\" />\n        </li>\n      </ul>\n    </section>\n  );\n}\n","import React from \"react\";\n\nimport styles from \"./TreeDisplay.module.scss\";\nimport paperToTrees from \"../../trees\";\nconst tree = require(\"../../images/tree.png\");\n\nconst MAX_TREES = 300;\n\nfunction Tree({ isStump }: { isStump: boolean }) {\n  const variance = Math.random() * 50;\n  return (\n    <img\n      className={isStump ? styles.treeStump : undefined}\n      style={{\n        display: \"inline-block\",\n        position: \"relative\",\n        left: `-${variance + 75}px`,\n        top: `${variance}px`,\n        marginBottom: \"-75px\"\n      }}\n      src={tree}\n      height=\"50\"\n      width=\"50\"\n      alt=\"\"\n    />\n  );\n}\n\nexport default function TreeDisplay({\n  unrecycledPaperTotal,\n  recycledPaperTotal\n}: {\n  unrecycledPaperTotal: number;\n  recycledPaperTotal: number;\n}) {\n  const treesConsumed = paperToTrees(unrecycledPaperTotal, recycledPaperTotal);\n  const treesRemaining = 300 - treesConsumed;\n\n  return (\n    <div>\n      <p>\n        We have used enough paper to cut down {treesConsumed} trees.{\" \"}\n        {treesRemaining > 0 ? (\n          <>\n            Of this forest of {MAX_TREES} trees, only {treesRemaining} remain.\n          </>\n        ) : (\n          <>\n            Of this forest of 300 trees, we have cut down all of them and more.\n          </>\n        )}\n      </p>\n\n      <div className={styles.treeDisplay}>\n        {treesConsumed > 0 &&\n          [...Array(Math.min(treesConsumed, 300)).keys()].map(i => (\n            <Tree key={i} isStump={true} />\n          ))}\n        {treesRemaining > 0 &&\n          [...Array(treesRemaining).keys()].map(i => (\n            <Tree key={i} isStump={false} />\n          ))}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport moment from \"moment\";\nimport Stats from \"./Stats\";\nimport TreeDisplay from \"./tree-display/TreeDisplay\";\n\nexport default ({\n  data,\n  days\n}: {\n  data: { [date: string]: number };\n  days: number;\n}) => {\n  let unrecycledPaperTotal = 0;\n  let recycledPaperTotal = 0;\n  const monthlyTotals = new Map<string, number>();\n  for (const date in data) {\n    const roundedDate = moment(date).format(\"YYYY-MM\");\n    const oldTotal = monthlyTotals.get(roundedDate) || 0;\n    monthlyTotals.set(roundedDate, data[date] + oldTotal);\n\n    if (moment(date) < moment(\"2019-05-01\")) {\n      unrecycledPaperTotal += data[date];\n    } else {\n      recycledPaperTotal += data[date];\n    }\n  }\n\n  const totalArray: { date: string; total: number }[] = [];\n  for (const [date, total] of monthlyTotals) {\n    totalArray.push({ date, total });\n  }\n\n  return (\n    <>\n      <div>\n        <TreeDisplay\n          unrecycledPaperTotal={unrecycledPaperTotal}\n          recycledPaperTotal={recycledPaperTotal}\n        />\n\n        <Stats\n          days={days}\n          unrecycledPaperTotal={unrecycledPaperTotal}\n          recycledPaperTotal={recycledPaperTotal}\n        />\n      </div>\n    </>\n  );\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport moment from \"moment\";\nimport { HistoricalTotals, MeterTypes } from \"../api\";\nimport { withRouter } from \"react-router\";\nimport PrintData from \"../components/CurrentYearView\";\nimport { Spinner } from \"@blueprintjs/core\";\nimport { DateInput, IDateFormatProps } from \"@blueprintjs/datetime\";\n\nfunction getTotal(all: HistoricalTotals) {\n  const output: { [date: string]: number } = {};\n  for (const date in all) {\n    output[date] =\n      all[date][MeterTypes.TOTAL_UNITS_OUTPUT] - all[date][MeterTypes.DUPLEX];\n  }\n  return output;\n}\n\nfunction getMomentFormatter(format: string): IDateFormatProps {\n  // note that locale argument comes from locale prop and may be undefined\n  return {\n    formatDate: (date: Date, locale: string) =>\n      moment(date)\n        .locale(locale)\n        .format(format),\n    parseDate: (str: string, locale: string) => {\n      const date = moment.utc(str, format).locale(locale);\n      if (!date.isValid()) {\n        return false;\n      } else {\n        return date.toDate();\n      }\n    },\n    placeholder: format\n  };\n}\n\nconst API_HOST =\n  process.env.REACT_APP_API_HOST || \"https://printmon.potatofrom.space\";\n\nfunction Home() {\n  const [startDate, setStartDate] = useState(moment(\"2018-07-01\"));\n  const [endDate, setEndDate] = useState(moment.utc());\n  const [dailyTotals, setDailyTotals] = useState<HistoricalTotals | undefined>(\n    undefined\n  );\n\n  const updateTotals = useCallback(async () => {\n    setDailyTotals(undefined);\n    const values = await fetch(\n      `${API_HOST}/api/historical?startDate=${startDate.format(\n        \"YYYY-MM-DD\"\n      )}&endDate=${endDate.format(\"YYYY-MM-DD\")}`\n    );\n    setDailyTotals(await values.json());\n  }, [startDate, endDate]);\n\n  useEffect(() => {\n    updateTotals();\n  }, [updateTotals]);\n\n  return (\n    <>\n      <h1>AB Paper Consumption</h1>\n      <em>\n        From{\" \"}\n        <DateInput\n          {...getMomentFormatter(\"LL\")}\n          canClearSelection={false}\n          value={startDate.toDate()}\n          maxDate={endDate.toDate()}\n          onChange={(e, isUserChange) => {\n            if (isUserChange) {\n              setStartDate(moment(e));\n            }\n          }}\n          locale=\"en\"\n        />{\" \"}\n        to{\" \"}\n        <DateInput\n          {...getMomentFormatter(\"LL\")}\n          canClearSelection={false}\n          value={endDate.toDate()}\n          minDate={startDate.toDate()}\n          maxDate={new Date()}\n          onChange={(e, isUserChange) => {\n            if (isUserChange) {\n              setEndDate(moment(e));\n            }\n          }}\n          locale=\"en\"\n        />\n        ...\n      </em>\n\n      {dailyTotals !== undefined ? (\n        <>\n          <PrintData\n            data={getTotal(dailyTotals)}\n            days={endDate.diff(startDate, \"days\")}\n          />\n        </>\n      ) : (\n        <div style={{ textAlign: \"center\" }}>\n          <Spinner />\n\n          <p>Loading...</p>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default withRouter(Home);\n","import React from \"react\";\n\nexport default function About() {\n  return (\n    <>\n      <h1>About AB Printing</h1>\n\n      <p>\n        AB Printing tracks the daily printing and copying amounts of\n        Acton-Boxborough Regional High School.\n      </p>\n\n      <h2>How do you track printing?</h2>\n\n      <p>\n        The school EdTech department has, for the past several years, tracked\n        printing and copying activity anonymously using a software called\n        LaserWatch. This data was pulled in and analyzed to get the real-time\n        statistics as shown on the home page.\n      </p>\n\n      <h2>Image Credits</h2>\n\n      <ul>\n        <li>\n          Tree Image -{\" \"}\n          <a href=\"http://pluspng.com/png-124472.html\">Tree Clipart PNG</a>.\n        </li>\n        <li>\n          James Stanier -{\" \"}\n          <a href=\"https://creativecommons.org/licenses/by-nc-sa/2.0/\">\n            A field in Falmer, Sussex\n          </a>\n          . Licensed under CC BY-NC-SA 2.0.\n        </li>\n      </ul>\n\n      <h2>Copyright</h2>\n\n      <p>\n        &copy; 2019 Kevin Liu, Aneesh Edara and Kunal Sharda. This program is\n        free software: you can redistribute it and/or modify it under the terms\n        of the{\" \"}\n        <a href=\"https://www.gnu.org/licenses/agpl-3.0.en.html\">\n          GNU Affero General Public License\n        </a>{\" \"}\n        as published by the Free Software Foundation, either version 3 of the\n        License, or (at your option) any later version.\n      </p>\n\n      <p>\n        See the source code{\" \"}\n        <a href=\"https://github.com/resource-force/printmon\">here</a>.\n      </p>\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  Route,\n  Switch,\n  withRouter,\n  RouteComponentProps\n} from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport styles from \"./App.module.scss\";\nimport {\n  Navbar,\n  NavbarGroup,\n  NavbarHeading,\n  NavbarDivider,\n  Classes,\n  Alignment,\n  Button\n} from \"@blueprintjs/core\";\n\nfunction App({ history }: RouteComponentProps<{}>) {\n  return (\n    <div className=\"bp3-dark\">\n      <Navbar color=\"dark\">\n        <NavbarGroup align={Alignment.LEFT}>\n          <NavbarHeading>AB Printing</NavbarHeading>\n          <NavbarDivider />\n          <Button\n            className={Classes.MINIMAL}\n            onClick={() => history.push(\"/\")}\n            icon=\"home\"\n            text=\"Home\"\n          />\n          <Button\n            className={Classes.MINIMAL}\n            onClick={() => history.push(\"/about\")}\n            icon=\"book\"\n            text=\"About\"\n          />\n        </NavbarGroup>\n      </Navbar>\n      <main className={styles.main}>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/about\" exact component={About} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"react-app-polyfill/ie9\"; // For IE 9-11 support (https://github.com/facebook/create-react-app/tree/master/packages/react-app-polyfill)\nimport React from \"react\";\n//@ts-ignore\nimport { render } from \"react-snapshot\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/datetime/lib/css/blueprint-datetime.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nrender(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statsList\":\"Stats_statsList__1lbSP\",\"counter__odometer\":\"Stats_counter__odometer__-2fFZ\",\"counter__unit\":\"Stats_counter__unit__3V-Nv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"treeDisplay\":\"TreeDisplay_treeDisplay__1dtzX\",\"treeStump\":\"TreeDisplay_treeStump__iOl_A\"};"],"sourceRoot":""}