{"version":3,"sources":["api.ts","components/HistoricalGraph.tsx","pages/Home.tsx","App.tsx","serviceWorker.js","index.js"],"names":["MeterTypes","HistoricalGraph","_ref","data","total","monthlyTotals","Map","date","roundedDate","moment","format","oldTotal","get","set","totalArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref4","value","_ref3","Object","slicedToArray","push","err","return","react_default","a","createElement","Fragment","es6","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","getTotal","all","output","API_HOST","process","REACT_APP_API_HOST","Home","_useState","useState","utc","_useState2","startDate","setStartDate","_useState3","_useState4","endDate","setEndDate","_useState5","_useState6","dailyTotals","setDailyTotals","updateTotals","_updateTotals","apply","this","arguments","asyncToGenerator","regenerator_default","mark","_callee","values","wrap","_context","prev","fetch","concat","sent","t0","json","t1","stop","useEffect","toString","toLocaleString","TOTAL_UNITS_OUTPUT","DUPLEX","onChange","e","target","onBlur","App","BrowserRouter","basename","Switch","Route","path","exact","component","Component","Boolean","window","location","hostname","match","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.018bcb5a.chunk.js","sourcesContent":["// HACK: Since CRA doesn't support importing TypeScript from other lerna\n// packages, we just inline the types here from the server.\n// Follow PR https://github.com/facebook/create-react-app/pull/6599.\nexport type HistoricalTotals = {\n  [date: string]: {\n    [MeterTypes.TOTAL_UNITS_OUTPUT]: number;\n    [MeterTypes.DUPLEX]: number;\n    [MeterTypes.TOTAL_COPIER_UNITS]: number;\n    [MeterTypes.TOTAL_PRINT_UNITS]: number;\n    [MeterTypes.TOTAL_SCAN_UNITS]: number;\n    [index: string]: number;\n  };\n};\n\nexport enum MeterTypes {\n  TOTAL_UNITS_OUTPUT = \"Impression.AllMeterTypes.AllFunctions.AllSides.AllPageSizes\",\n  TOTAL_MONO_UNITS_OUTPUT = \"Impression.Mono.AllFunctions.AllSides.AllPageSizes\",\n  TOTAL_COLOR_UNITS_OUTPUT = \"Impression.Color.AllFunctions.AllSides.AllPageSizes\",\n  TOTAL_SCAN_UNITS = \"Impression.AllMeterTypes.Scan.AllSides.AllPageSizes\",\n  TOTAL_PRINT_UNITS = \"Impression.AllMeterTypes.Print.AllSides.AllPAgeSizes\",\n  TOTAL_COPIER_UNITS = \"Impression.AllMeterTypes.Copy.AllSides.AllPAgeSizes\",\n  DUPLEX = \"Impression.AllMeterTypes.AllFunctions.Duplex.AllPageSizes\"\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n  LineChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Line\n} from \"recharts\";\nimport moment from \"moment\";\n\nexport default ({ data }: { data: { [date: string]: number } }) => {\n  let total = 0;\n  const monthlyTotals = new Map<string, number>();\n  for (const date in data) {\n    const roundedDate = moment(date).format(\"YYYY-MM\");\n    const oldTotal = monthlyTotals.get(roundedDate) || 0;\n    monthlyTotals.set(roundedDate, data[date] + oldTotal);\n    total += data[date];\n  }\n\n  const totalArray: { date: string; total: number }[] = [];\n  for (const [date, total] of monthlyTotals) {\n    totalArray.push({ date, total });\n  }\n\n  return (\n    <>\n      <LineChart\n        width={1000}\n        height={700}\n        data={totalArray}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"total\" stroke=\"#82ca9d\" />\n      </LineChart>\n      <h2>Total: {total}</h2>\n    </>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport HistoricalGraph from \"../components/HistoricalGraph\";\nimport moment from \"moment\";\nimport { HistoricalTotals, MeterTypes } from \"../api\";\n\nfunction getTotal(all: HistoricalTotals, type: MeterTypes) {\n  const output: { [date: string]: number } = {};\n  for (const date in all) {\n    output[date] = all[date][type];\n  }\n  return output;\n}\n\nconst API_HOST =\n  process.env.REACT_APP_API_HOST || \"https://printmon.potatofrom.space\";\n\nexport default () => {\n  const [startDate, setStartDate] = useState(moment.utc(\"2018-07-01\"));\n  const [endDate, setEndDate] = useState(moment.utc());\n  const [dailyTotals, setDailyTotals] = useState<HistoricalTotals | undefined>(\n    undefined\n  );\n\n  async function updateTotals() {\n    const values = await fetch(\n      `${API_HOST}/api/historical?startDate=${startDate.format(\n        \"YYYY-MM-DD\"\n      )}&endDate=${endDate.format(\"YYYY-MM-DD\")}`\n    );\n    setDailyTotals(await values.json());\n  }\n\n  useEffect(() => {\n    updateTotals();\n  }, []);\n\n  return (\n    <>\n      <h1>\n        AB Print Data from {startDate.toString()} to {endDate.toLocaleString()}\n      </h1>\n      {dailyTotals !== undefined && (\n        <>\n          <HistoricalGraph\n            data={getTotal(dailyTotals, MeterTypes.TOTAL_UNITS_OUTPUT)}\n          />\n          <HistoricalGraph data={getTotal(dailyTotals, MeterTypes.DUPLEX)} />\n        </>\n      )}\n      <input\n        type=\"date\"\n        value={startDate.format(\"YYYY-MM-DD\")}\n        onChange={e => setStartDate(moment(e.target.value))}\n        onBlur={updateTotals}\n      />{\" \"}\n      to\n      <input\n        type=\"date\"\n        value={endDate.format(\"YYYY-MM-DD\")}\n        onChange={e => setEndDate(moment(e.target.value))}\n        onBlur={updateTotals}\n      />\n    </>\n  );\n};\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"react-app-polyfill/ie9\"; // For IE 9-11 support (https://github.com/facebook/create-react-app/tree/master/packages/react-app-polyfill)\nimport React from \"react\";\nimport { render } from \"react-snapshot\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nrender(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}